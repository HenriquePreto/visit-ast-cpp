{
    "functions": [],
    "total": 0,
    "visited": 0
}
{
    "functions": [],
    "total": 9,
    "visited": 0
}
{
    "functions": [
        {
            "id": "/Users/henriquepreto/Desktop/visit-ast-cpp/scripts/benchmarks/bzip2/bzlib.c#409:1#BZ2_bzCompress",
            "nobreaks": 1,
            "body": "{\n    Bool progress;\n    EState *s;\n    if (strm == ((void *)0))\n        return (-2);\n    s = strm->state;\n    if (s == ((void *)0))\n        return (-2);\n    if (s->strm != strm)\n        return (-2);\n  preswitch:\n    switch (s->mode) {\n      case 1:\n        return (-1);\n      case 2:\n        if (action == 0) {\n            progress = handle_compress(strm);\n            return progress ? 1 : (-2);\n        } else if (action == 1) {\n            s->avail_in_expect = strm->avail_in;\n            s->mode = 3;\n            goto preswitch;\n        } else if (action == 2) {\n            s->avail_in_expect = strm->avail_in;\n            s->mode = 4;\n            goto preswitch;\n        } else\n            return (-2);\n      case 3:\n        if (action != 1)\n            return (-1);\n        if (s->avail_in_expect != s->strm->avail_in)\n            return (-1);\n        progress = handle_compress(strm);\n        if (s->avail_in_expect > 0 || !isempty_RL(s) || s->state_out_pos < s->numZ)\n            return 2;\n        s->mode = 2;\n        return 1;\n      case 4:\n        if (action != 2)\n            return (-1);\n        if (s->avail_in_expect != s->strm->avail_in)\n            return (-1);\n        progress = handle_compress(strm);\n        if (!progress)\n            return (-1);\n        if (s->avail_in_expect > 0 || !isempty_RL(s) || s->state_out_pos < s->numZ)\n            return 3;\n        s->mode = 1;\n        return 4;\n    }\n    return 0;\n}\n"
        }
    ],
    "total": 41,
    "visited": 1
}
{
    "functions": [
        {
            "id": "/Users/henriquepreto/Desktop/visit-ast-cpp/scripts/benchmarks/bzip2/decompress.c#106:1#BZ2_decompress",
            "nobreaks": 1,
            "body": "{\n    UChar uc;\n    Int32 retVal;\n    Int32 minLen, maxLen;\n    bz_stream *strm = s->strm;\n    Int32 i;\n    Int32 j;\n    Int32 t;\n    Int32 alphaSize;\n    Int32 nGroups;\n    Int32 nSelectors;\n    Int32 EOB;\n    Int32 groupNo;\n    Int32 groupPos;\n    Int32 nextSym;\n    Int32 nblockMAX;\n    Int32 nblock;\n    Int32 es;\n    Int32 N;\n    Int32 curr;\n    Int32 zt;\n    Int32 zn;\n    Int32 zvec;\n    Int32 zj;\n    Int32 gSel;\n    Int32 gMinlen;\n    Int32 *gLimit;\n    Int32 *gBase;\n    Int32 *gPerm;\n    if (s->state == 10) {\n        s->save_i = 0;\n        s->save_j = 0;\n        s->save_t = 0;\n        s->save_alphaSize = 0;\n        s->save_nGroups = 0;\n        s->save_nSelectors = 0;\n        s->save_EOB = 0;\n        s->save_groupNo = 0;\n        s->save_groupPos = 0;\n        s->save_nextSym = 0;\n        s->save_nblockMAX = 0;\n        s->save_nblock = 0;\n        s->save_es = 0;\n        s->save_N = 0;\n        s->save_curr = 0;\n        s->save_zt = 0;\n        s->save_zn = 0;\n        s->save_zvec = 0;\n        s->save_zj = 0;\n        s->save_gSel = 0;\n        s->save_gMinlen = 0;\n        s->save_gLimit = ((void *)0);\n        s->save_gBase = ((void *)0);\n        s->save_gPerm = ((void *)0);\n    }\n    i = s->save_i;\n    j = s->save_j;\n    t = s->save_t;\n    alphaSize = s->save_alphaSize;\n    nGroups = s->save_nGroups;\n    nSelectors = s->save_nSelectors;\n    EOB = s->save_EOB;\n    groupNo = s->save_groupNo;\n    groupPos = s->save_groupPos;\n    nextSym = s->save_nextSym;\n    nblockMAX = s->save_nblockMAX;\n    nblock = s->save_nblock;\n    es = s->save_es;\n    N = s->save_N;\n    curr = s->save_curr;\n    zt = s->save_zt;\n    zn = s->save_zn;\n    zvec = s->save_zvec;\n    zj = s->save_zj;\n    gSel = s->save_gSel;\n    gMinlen = s->save_gMinlen;\n    gLimit = s->save_gLimit;\n    gBase = s->save_gBase;\n    gPerm = s->save_gPerm;\n    retVal = 0;\n    switch (s->state) {\n      case 10:\n        s->state = 10;\n        while (((Bool)1))\n            {\n                if (s->bsLive >= 8) {\n                    UInt32 v;\n                    v = (s->bsBuff >> (s->bsLive - 8)) & ((1 << 8) - 1);\n                    s->bsLive -= 8;\n                    uc = v;\n                    break;\n                }\n                if (s->strm->avail_in == 0) {\n                    retVal = 0;\n                    goto save_state_and_return;\n                }\n                ;\n                ;\n                s->bsBuff = (s->bsBuff << 8) | ((UInt32)(*((UChar *)(s->strm->next_in))));\n                s->bsLive += 8;\n                s->strm->next_in++;\n                s->strm->avail_in--;\n                s->strm->total_in_lo32++;\n                if (s->strm->total_in_lo32 == 0)\n                    s->strm->total_in_hi32++;\n            }\n        ;\n        if (uc != 66) {\n            retVal = (-5);\n            goto save_state_and_return;\n        }\n        ;\n        ;\n      case 11:\n        s->state = 11;\n        while (((Bool)1))\n            {\n                if (s->bsLive >= 8) {\n                    UInt32 v;\n                    v = (s->bsBuff >> (s->bsLive - 8)) & ((1 << 8) - 1);\n                    s->bsLive -= 8;\n                    uc = v;\n                    break;\n                }\n                if (s->strm->avail_in == 0) {\n                    retVal = 0;\n                    goto save_state_and_return;\n                }\n                ;\n                ;\n                s->bsBuff = (s->bsBuff << 8) | ((UInt32)(*((UChar *)(s->strm->next_in))));\n                s->bsLive += 8;\n                s->strm->next_in++;\n                s->strm->avail_in--;\n                s->strm->total_in_lo32++;\n                if (s->strm->total_in_lo32 == 0)\n                    s->strm->total_in_hi32++;\n            }\n        ;\n        if (uc != 90) {\n            retVal = (-5);\n            goto save_state_and_return;\n        }\n        ;\n        ;\n      case 12:\n        s->state = 12;\n        while (((Bool)1))\n            {\n                if (s->bsLive >= 8) {\n                    UInt32 v;\n                    v = (s->bsBuff >> (s->bsLive - 8)) & ((1 << 8) - 1);\n                    s->bsLive -= 8;\n                    uc = v;\n                    break;\n                }\n                if (s->strm->avail_in == 0) {\n                    retVal = 0;\n                    goto save_state_and_return;\n                }\n                ;\n                ;\n                s->bsBuff = (s->bsBuff << 8) | ((UInt32)(*((UChar *)(s->strm->next_in))));\n                s->bsLive += 8;\n                s->strm->next_in++;\n                s->strm->avail_in--;\n                s->strm->total_in_lo32++;\n                if (s->strm->total_in_lo32 == 0)\n                    s->strm->total_in_hi32++;\n            }\n        if (uc != 104) {\n            retVal = (-5);\n            goto save_state_and_return;\n        }\n        ;\n        ;\n      case 13:\n        s->state = 13;\n        while (((Bool)1))\n            {\n                if (s->bsLive >= 8) {\n                    UInt32 v;\n                    v = (s->bsBuff >> (s->bsLive - 8)) & ((1 << 8) - 1);\n                    s->bsLive -= 8;\n                    s->blockSize100k = v;\n                    break;\n                }\n                if (s->strm->avail_in == 0) {\n                    retVal = 0;\n                    goto save_state_and_return;\n                }\n                ;\n                ;\n                s->bsBuff = (s->bsBuff << 8) | ((UInt32)(*((UChar *)(s->strm->next_in))));\n                s->bsLive += 8;\n                s->strm->next_in++;\n                s->strm->avail_in--;\n                s->strm->total_in_lo32++;\n                if (s->strm->total_in_lo32 == 0)\n                    s->strm->total_in_hi32++;\n            }\n        if (s->blockSize100k < (48 + 1) || s->blockSize100k > (48 + 9)) {\n            retVal = (-5);\n            goto save_state_and_return;\n        }\n        ;\n        ;\n        s->blockSize100k -= 48;\n        if (s->smallDecompress) {\n            s->ll16 = (strm->bzalloc)(strm->opaque, (s->blockSize100k * 100000 * sizeof(UInt16)), 1);\n            s->ll4 = (strm->bzalloc)(strm->opaque, (((1 + s->blockSize100k * 100000) >> 1) * sizeof(UChar)), 1);\n            if (s->ll16 == ((void *)0) || s->ll4 == ((void *)0)) {\n                retVal = (-3);\n                goto save_state_and_return;\n            }\n            ;\n            ;\n        } else {\n            s->tt = (strm->bzalloc)(strm->opaque, (s->blockSize100k * 100000 * sizeof(Int32)), 1);\n            if (s->tt == ((void *)0)) {\n                retVal = (-3);\n                goto save_state_and_return;\n            }\n            ;\n            ;\n        }\n      case 14:\n        s->state = 14;\n        while (((Bool)1))\n            {\n                if (s->bsLive >= 8) {\n                    UInt32 v;\n                    v = (s->bsBuff >> (s->bsLive - 8)) & ((1 << 8) - 1);\n                    s->bsLive -= 8;\n                    uc = v;\n                    break;\n                }\n                if (s->strm->avail_in == 0) {\n                    retVal = 0;\n                    goto save_state_and_return;\n                }\n                ;\n                ;\n                s->bsBuff = (s->bsBuff << 8) | ((UInt32)(*((UChar *)(s->strm->next_in))));\n                s->bsLive += 8;\n                s->strm->next_in++;\n                s->strm->avail_in--;\n                s->strm->total_in_lo32++;\n                if (s->strm->total_in_lo32 == 0)\n                    s->strm->total_in_hi32++;\n            }\n        ;\n        if (uc == 23)\n            goto endhdr_2;\n        if (uc != 49) {\n            retVal = (-4);\n            goto save_state_and_return;\n        }\n        ;\n        ;\n      case 15:\n        s->state = 15;\n        while (((Bool)1))\n            {\n                if (s->bsLive >= 8) {\n                    UInt32 v;\n                    v = (s->bsBuff >> (s->bsLive - 8)) & ((1 << 8) - 1);\n                    s->bsLive -= 8;\n                    uc = v;\n                    break;\n                }\n                if (s->strm->avail_in == 0) {\n                    retVal = 0;\n                    goto save_state_and_return;\n                }\n                ;\n                ;\n                s->bsBuff = (s->bsBuff << 8) | ((UInt32)(*((UChar *)(s->strm->next_in))));\n                s->bsLive += 8;\n                s->strm->next_in++;\n                s->strm->avail_in--;\n                s->strm->total_in_lo32++;\n                if (s->strm->total_in_lo32 == 0)\n                    s->strm->total_in_hi32++;\n            }\n        ;\n        if (uc != 65) {\n            retVal = (-4);\n            goto save_state_and_return;\n        }\n        ;\n        ;\n      case 16:\n        s->state = 16;\n        while (((Bool)1))\n            {\n                if (s->bsLive >= 8) {\n                    UInt32 v;\n                    v = (s->bsBuff >> (s->bsLive - 8)) & ((1 << 8) - 1);\n                    s->bsLive -= 8;\n                    uc = v;\n                    break;\n                }\n                if (s->strm->avail_in == 0) {\n                    retVal = 0;\n                    goto save_state_and_return;\n                }\n                ;\n                ;\n                s->bsBuff = (s->bsBuff << 8) | ((UInt32)(*((UChar *)(s->strm->next_in))));\n                s->bsLive += 8;\n                s->strm->next_in++;\n                s->strm->avail_in--;\n                s->strm->total_in_lo32++;\n                if (s->strm->total_in_lo32 == 0)\n                    s->strm->total_in_hi32++;\n            }\n        ;\n        if (uc != 89) {\n            retVal = (-4);\n            goto save_state_and_return;\n        }\n        ;\n        ;\n      case 17:\n        s->state = 17;\n        while (((Bool)1))\n            {\n                if (s->bsLive >= 8) {\n                    UInt32 v;\n                    v = (s->bsBuff >> (s->bsLive - 8)) & ((1 << 8) - 1);\n                    s->bsLive -= 8;\n                    uc = v;\n                    break;\n                }\n                if (s->strm->avail_in == 0) {\n                    retVal = 0;\n                    goto save_state_and_return;\n                }\n                ;\n                ;\n                s->bsBuff = (s->bsBuff << 8) | ((UInt32)(*((UChar *)(s->strm->next_in))));\n                s->bsLive += 8;\n                s->strm->next_in++;\n                s->strm->avail_in--;\n                s->strm->total_in_lo32++;\n                if (s->strm->total_in_lo32 == 0)\n                    s->strm->total_in_hi32++;\n            }\n        ;\n        if (uc != 38) {\n            retVal = (-4);\n            goto save_state_and_return;\n        }\n        ;\n        ;\n      case 18:\n        s->state = 18;\n        while (((Bool)1))\n            {\n                if (s->bsLive >= 8) {\n                    UInt32 v;\n                    v = (s->bsBuff >> (s->bsLive - 8)) & ((1 << 8) - 1);\n                    s->bsLive -= 8;\n                    uc = v;\n                    break;\n                }\n                if (s->strm->avail_in == 0) {\n                    retVal = 0;\n                    goto save_state_and_return;\n                }\n                ;\n                ;\n                s->bsBuff = (s->bsBuff << 8) | ((UInt32)(*((UChar *)(s->strm->next_in))));\n                s->bsLive += 8;\n                s->strm->next_in++;\n                s->strm->avail_in--;\n                s->strm->total_in_lo32++;\n                if (s->strm->total_in_lo32 == 0)\n                    s->strm->total_in_hi32++;\n            }\n        ;\n        if (uc != 83) {\n            retVal = (-4);\n            goto save_state_and_return;\n        }\n        ;\n        ;\n      case 19:\n        s->state = 19;\n        while (((Bool)1))\n            {\n                if (s->bsLive >= 8) {\n                    UInt32 v;\n                    v = (s->bsBuff >> (s->bsLive - 8)) & ((1 << 8) - 1);\n                    s->bsLive -= 8;\n                    uc = v;\n                    break;\n                }\n                if (s->strm->avail_in == 0) {\n                    retVal = 0;\n                    goto save_state_and_return;\n                }\n                ;\n                ;\n                s->bsBuff = (s->bsBuff << 8) | ((UInt32)(*((UChar *)(s->strm->next_in))));\n                s->bsLive += 8;\n                s->strm->next_in++;\n                s->strm->avail_in--;\n                s->strm->total_in_lo32++;\n                if (s->strm->total_in_lo32 == 0)\n                    s->strm->total_in_hi32++;\n            }\n        ;\n        if (uc != 89) {\n            retVal = (-4);\n            goto save_state_and_return;\n        }\n        ;\n        ;\n        s->currBlockNo++;\n        if (s->verbosity >= 2)\n            fprintf(__stderrp, \"\\n    [%d: huff+mtf \", s->currBlockNo);\n        s->storedBlockCRC = 0;\n      case 20:\n        s->state = 20;\n        while (((Bool)1))\n            {\n                if (s->bsLive >= 8) {\n                    UInt32 v;\n                    v = (s->bsBuff >> (s->bsLive - 8)) & ((1 << 8) - 1);\n                    s->bsLive -= 8;\n                    uc = v;\n                    break;\n                }\n                if (s->strm->avail_in == 0) {\n                    retVal = 0;\n                    goto save_state_and_return;\n                }\n                ;\n                ;\n                s->bsBuff = (s->bsBuff << 8) | ((UInt32)(*((UChar *)(s->strm->next_in))));\n                s->bsLive += 8;\n                s->strm->next_in++;\n                s->strm->avail_in--;\n                s->strm->total_in_lo32++;\n                if (s->strm->total_in_lo32 == 0)\n                    s->strm->total_in_hi32++;\n            }\n        ;\n        s->storedBlockCRC = (s->storedBlockCRC << 8) | ((UInt32)uc);\n      case 21:\n        s->state = 21;\n        while (((Bool)1))\n            {\n                if (s->bsLive >= 8) {\n                    UInt32 v;\n                    v = (s->bsBuff >> (s->bsLive - 8)) & ((1 << 8) - 1);\n                    s->bsLive -= 8;\n                    uc = v;\n                    break;\n                }\n                if (s->strm->avail_in == 0) {\n                    retVal = 0;\n                    goto save_state_and_return;\n                }\n                ;\n                ;\n                s->bsBuff = (s->bsBuff << 8) | ((UInt32)(*((UChar *)(s->strm->next_in))));\n                s->bsLive += 8;\n                s->strm->next_in++;\n                s->strm->avail_in--;\n                s->strm->total_in_lo32++;\n                if (s->strm->total_in_lo32 == 0)\n                    s->strm->total_in_hi32++;\n            }\n        ;\n        s->storedBlockCRC = (s->storedBlockCRC << 8) | ((UInt32)uc);\n      case 22:\n        s->state = 22;\n        while (((Bool)1))\n            {\n                if (s->bsLive >= 8) {\n                    UInt32 v;\n                    v = (s->bsBuff >> (s->bsLive - 8)) & ((1 << 8) - 1);\n                    s->bsLive -= 8;\n                    uc = v;\n                    break;\n                }\n                if (s->strm->avail_in == 0) {\n                    retVal = 0;\n                    goto save_state_and_return;\n                }\n                ;\n                ;\n                s->bsBuff = (s->bsBuff << 8) | ((UInt32)(*((UChar *)(s->strm->next_in))));\n                s->bsLive += 8;\n                s->strm->next_in++;\n                s->strm->avail_in--;\n                s->strm->total_in_lo32++;\n                if (s->strm->total_in_lo32 == 0)\n                    s->strm->total_in_hi32++;\n            }\n        ;\n        s->storedBlockCRC = (s->storedBlockCRC << 8) | ((UInt32)uc);\n      case 23:\n        s->state = 23;\n        while (((Bool)1))\n            {\n                if (s->bsLive >= 8) {\n                    UInt32 v;\n                    v = (s->bsBuff >> (s->bsLive - 8)) & ((1 << 8) - 1);\n                    s->bsLive -= 8;\n                    uc = v;\n                    break;\n                }\n                if (s->strm->avail_in == 0) {\n                    retVal = 0;\n                    goto save_state_and_return;\n                }\n                ;\n                ;\n                s->bsBuff = (s->bsBuff << 8) | ((UInt32)(*((UChar *)(s->strm->next_in))));\n                s->bsLive += 8;\n                s->strm->next_in++;\n                s->strm->avail_in--;\n                s->strm->total_in_lo32++;\n                if (s->strm->total_in_lo32 == 0)\n                    s->strm->total_in_hi32++;\n            }\n        ;\n        s->storedBlockCRC = (s->storedBlockCRC << 8) | ((UInt32)uc);\n      case 24:\n        s->state = 24;\n        while (((Bool)1))\n            {\n                if (s->bsLive >= 1) {\n                    UInt32 v;\n                    v = (s->bsBuff >> (s->bsLive - 1)) & ((1 << 1) - 1);\n                    s->bsLive -= 1;\n                    s->blockRandomised = v;\n                    break;\n                }\n                if (s->strm->avail_in == 0) {\n                    retVal = 0;\n                    goto save_state_and_return;\n                }\n                ;\n                ;\n                s->bsBuff = (s->bsBuff << 8) | ((UInt32)(*((UChar *)(s->strm->next_in))));\n                s->bsLive += 8;\n                s->strm->next_in++;\n                s->strm->avail_in--;\n                s->strm->total_in_lo32++;\n                if (s->strm->total_in_lo32 == 0)\n                    s->strm->total_in_hi32++;\n            }\n        ;\n        s->origPtr = 0;\n      case 25:\n        s->state = 25;\n        while (((Bool)1))\n            {\n                if (s->bsLive >= 8) {\n                    UInt32 v;\n                    v = (s->bsBuff >> (s->bsLive - 8)) & ((1 << 8) - 1);\n                    s->bsLive -= 8;\n                    uc = v;\n                    break;\n                }\n                if (s->strm->avail_in == 0) {\n                    retVal = 0;\n                    goto save_state_and_return;\n                }\n                ;\n                ;\n                s->bsBuff = (s->bsBuff << 8) | ((UInt32)(*((UChar *)(s->strm->next_in))));\n                s->bsLive += 8;\n                s->strm->next_in++;\n                s->strm->avail_in--;\n                s->strm->total_in_lo32++;\n                if (s->strm->total_in_lo32 == 0)\n                    s->strm->total_in_hi32++;\n            }\n        ;\n        s->origPtr = (s->origPtr << 8) | ((Int32)uc);\n      case 26:\n        s->state = 26;\n        while (((Bool)1))\n            {\n                if (s->bsLive >= 8) {\n                    UInt32 v;\n                    v = (s->bsBuff >> (s->bsLive - 8)) & ((1 << 8) - 1);\n                    s->bsLive -= 8;\n                    uc = v;\n                    break;\n                }\n                if (s->strm->avail_in == 0) {\n                    retVal = 0;\n                    goto save_state_and_return;\n                }\n                ;\n                ;\n                s->bsBuff = (s->bsBuff << 8) | ((UInt32)(*((UChar *)(s->strm->next_in))));\n                s->bsLive += 8;\n                s->strm->next_in++;\n                s->strm->avail_in--;\n                s->strm->total_in_lo32++;\n                if (s->strm->total_in_lo32 == 0)\n                    s->strm->total_in_hi32++;\n            }\n        ;\n        s->origPtr = (s->origPtr << 8) | ((Int32)uc);\n      case 27:\n        s->state = 27;\n        while (((Bool)1))\n            {\n                if (s->bsLive >= 8) {\n                    UInt32 v;\n                    v = (s->bsBuff >> (s->bsLive - 8)) & ((1 << 8) - 1);\n                    s->bsLive -= 8;\n                    uc = v;\n                    break;\n                }\n                if (s->strm->avail_in == 0) {\n                    retVal = 0;\n                    goto save_state_and_return;\n                }\n                ;\n                ;\n                s->bsBuff = (s->bsBuff << 8) | ((UInt32)(*((UChar *)(s->strm->next_in))));\n                s->bsLive += 8;\n                s->strm->next_in++;\n                s->strm->avail_in--;\n                s->strm->total_in_lo32++;\n                if (s->strm->total_in_lo32 == 0)\n                    s->strm->total_in_hi32++;\n            }\n        ;\n        s->origPtr = (s->origPtr << 8) | ((Int32)uc);\n        if (s->origPtr < 0) {\n            retVal = (-4);\n            goto save_state_and_return;\n        }\n        ;\n        ;\n        if (s->origPtr > 10 + 100000 * s->blockSize100k) {\n            retVal = (-4);\n            goto save_state_and_return;\n        }\n        ;\n        ;\n        for (i = 0; i < 16; i++) {\n          case 28:\n            s->state = 28;\n            while (((Bool)1))\n                {\n                    if (s->bsLive >= 1) {\n                        UInt32 v;\n                        v = (s->bsBuff >> (s->bsLive - 1)) & ((1 << 1) - 1);\n                        s->bsLive -= 1;\n                        uc = v;\n                        break;\n                    }\n                    if (s->strm->avail_in == 0) {\n                        retVal = 0;\n                        goto save_state_and_return;\n                    }\n                    ;\n                    ;\n                    s->bsBuff = (s->bsBuff << 8) | ((UInt32)(*((UChar *)(s->strm->next_in))));\n                    s->bsLive += 8;\n                    s->strm->next_in++;\n                    s->strm->avail_in--;\n                    s->strm->total_in_lo32++;\n                    if (s->strm->total_in_lo32 == 0)\n                        s->strm->total_in_hi32++;\n                }\n            ;\n            if (uc == 1)\n                s->inUse16[i] = ((Bool)1);\n            else\n                s->inUse16[i] = ((Bool)0);\n        }\n        for (i = 0; i < 256; i++)\n            s->inUse[i] = ((Bool)0);\n        for (i = 0; i < 16; i++)\n            if (s->inUse16[i])\n                for (j = 0; j < 16; j++) {\n                  case 29:\n                    s->state = 29;\n                    while (((Bool)1))\n                        {\n                            if (s->bsLive >= 1) {\n                                UInt32 v;\n                                v = (s->bsBuff >> (s->bsLive - 1)) & ((1 << 1) - 1);\n                                s->bsLive -= 1;\n                                uc = v;\n                                break;\n                            }\n                            if (s->strm->avail_in == 0) {\n                                retVal = 0;\n                                goto save_state_and_return;\n                            }\n                            ;\n                            ;\n                            s->bsBuff = (s->bsBuff << 8) | ((UInt32)(*((UChar *)(s->strm->next_in))));\n                            s->bsLive += 8;\n                            s->strm->next_in++;\n                            s->strm->avail_in--;\n                            s->strm->total_in_lo32++;\n                            if (s->strm->total_in_lo32 == 0)\n                                s->strm->total_in_hi32++;\n                        }\n                    ;\n                    if (uc == 1)\n                        s->inUse[i * 16 + j] = ((Bool)1);\n                }\n        makeMaps_d(s);\n        if (s->nInUse == 0) {\n            retVal = (-4);\n            goto save_state_and_return;\n        }\n        ;\n        ;\n        alphaSize = s->nInUse + 2;\n      case 30:\n        s->state = 30;\n        while (((Bool)1))\n            {\n                if (s->bsLive >= 3) {\n                    UInt32 v;\n                    v = (s->bsBuff >> (s->bsLive - 3)) & ((1 << 3) - 1);\n                    s->bsLive -= 3;\n                    nGroups = v;\n                    break;\n                }\n                if (s->strm->avail_in == 0) {\n                    retVal = 0;\n                    goto save_state_and_return;\n                }\n                ;\n                ;\n                s->bsBuff = (s->bsBuff << 8) | ((UInt32)(*((UChar *)(s->strm->next_in))));\n                s->bsLive += 8;\n                s->strm->next_in++;\n                s->strm->avail_in--;\n                s->strm->total_in_lo32++;\n                if (s->strm->total_in_lo32 == 0)\n                    s->strm->total_in_hi32++;\n            }\n        ;\n        if (nGroups < 2 || nGroups > 6) {\n            retVal = (-4);\n            goto save_state_and_return;\n        }\n        ;\n        ;\n      case 31:\n        s->state = 31;\n        while (((Bool)1))\n            {\n                if (s->bsLive >= 15) {\n                    UInt32 v;\n                    v = (s->bsBuff >> (s->bsLive - 15)) & ((1 << 15) - 1);\n                    s->bsLive -= 15;\n                    nSelectors = v;\n                    break;\n                }\n                if (s->strm->avail_in == 0) {\n                    retVal = 0;\n                    goto save_state_and_return;\n                }\n                ;\n                ;\n                s->bsBuff = (s->bsBuff << 8) | ((UInt32)(*((UChar *)(s->strm->next_in))));\n                s->bsLive += 8;\n                s->strm->next_in++;\n                s->strm->avail_in--;\n                s->strm->total_in_lo32++;\n                if (s->strm->total_in_lo32 == 0)\n                    s->strm->total_in_hi32++;\n            }\n        ;\n        if (nSelectors < 1) {\n            retVal = (-4);\n            goto save_state_and_return;\n        }\n        ;\n        ;\n        for (i = 0; i < nSelectors; i++) {\n            j = 0;\n            while (((Bool)1))\n                {\n                  case 32:\n                    s->state = 32;\n                    while (((Bool)1))\n                        {\n                            if (s->bsLive >= 1) {\n                                UInt32 v;\n                                v = (s->bsBuff >> (s->bsLive - 1)) & ((1 << 1) - 1);\n                                s->bsLive -= 1;\n                                uc = v;\n                                break;\n                            }\n                            if (s->strm->avail_in == 0) {\n                                retVal = 0;\n                                goto save_state_and_return;\n                            }\n                            ;\n                            ;\n                            s->bsBuff = (s->bsBuff << 8) | ((UInt32)(*((UChar *)(s->strm->next_in))));\n                            s->bsLive += 8;\n                            s->strm->next_in++;\n                            s->strm->avail_in--;\n                            s->strm->total_in_lo32++;\n                            if (s->strm->total_in_lo32 == 0)\n                                s->strm->total_in_hi32++;\n                        }\n                    ;\n                    if (uc == 0)\n                        break;\n                    j++;\n                    if (j >= nGroups) {\n                        retVal = (-4);\n                        goto save_state_and_return;\n                    }\n                    ;\n                    ;\n                }\n            if (i < (2 + (900000 / 50)))\n                s->selectorMtf[i] = j;\n        }\n        if (nSelectors > (2 + (900000 / 50)))\n            nSelectors = (2 + (900000 / 50));\n        {\n            UChar pos[6], tmp, v;\n            for (v = 0; v < nGroups; v++)\n                pos[v] = v;\n            for (i = 0; i < nSelectors; i++) {\n                v = s->selectorMtf[i];\n                tmp = pos[v];\n                while (v > 0)\n                    {\n                        pos[v] = pos[v - 1];\n                        v--;\n                    }\n                pos[0] = tmp;\n                s->selector[i] = tmp;\n            }\n        }\n        for (t = 0; t < nGroups; t++) {\n          case 33:\n            s->state = 33;\n            while (((Bool)1))\n                {\n                    if (s->bsLive >= 5) {\n                        UInt32 v;\n                        v = (s->bsBuff >> (s->bsLive - 5)) & ((1 << 5) - 1);\n                        s->bsLive -= 5;\n                        curr = v;\n                        break;\n                    }\n                    if (s->strm->avail_in == 0) {\n                        retVal = 0;\n                        goto save_state_and_return;\n                    }\n                    ;\n                    ;\n                    s->bsBuff = (s->bsBuff << 8) | ((UInt32)(*((UChar *)(s->strm->next_in))));\n                    s->bsLive += 8;\n                    s->strm->next_in++;\n                    s->strm->avail_in--;\n                    s->strm->total_in_lo32++;\n                    if (s->strm->total_in_lo32 == 0)\n                        s->strm->total_in_hi32++;\n                }\n            ;\n            for (i = 0; i < alphaSize; i++) {\n                while (((Bool)1))\n                    {\n                        if (curr < 1 || curr > 20) {\n                            retVal = (-4);\n                            goto save_state_and_return;\n                        }\n                        ;\n                        ;\n                      case 34:\n                        s->state = 34;\n                        while (((Bool)1))\n                            {\n                                if (s->bsLive >= 1) {\n                                    UInt32 v;\n                                    v = (s->bsBuff >> (s->bsLive - 1)) & ((1 << 1) - 1);\n                                    s->bsLive -= 1;\n                                    uc = v;\n                                    break;\n                                }\n                                if (s->strm->avail_in == 0) {\n                                    retVal = 0;\n                                    goto save_state_and_return;\n                                }\n                                ;\n                                ;\n                                s->bsBuff = (s->bsBuff << 8) | ((UInt32)(*((UChar *)(s->strm->next_in))));\n                                s->bsLive += 8;\n                                s->strm->next_in++;\n                                s->strm->avail_in--;\n                                s->strm->total_in_lo32++;\n                                if (s->strm->total_in_lo32 == 0)\n                                    s->strm->total_in_hi32++;\n                            }\n                        ;\n                        if (uc == 0)\n                            break;\n                      case 35:\n                        s->state = 35;\n                        while (((Bool)1))\n                            {\n                                if (s->bsLive >= 1) {\n                                    UInt32 v;\n                                    v = (s->bsBuff >> (s->bsLive - 1)) & ((1 << 1) - 1);\n                                    s->bsLive -= 1;\n                                    uc = v;\n                                    break;\n                                }\n                                if (s->strm->avail_in == 0) {\n                                    retVal = 0;\n                                    goto save_state_and_return;\n                                }\n                                ;\n                                ;\n                                s->bsBuff = (s->bsBuff << 8) | ((UInt32)(*((UChar *)(s->strm->next_in))));\n                                s->bsLive += 8;\n                                s->strm->next_in++;\n                                s->strm->avail_in--;\n                                s->strm->total_in_lo32++;\n                                if (s->strm->total_in_lo32 == 0)\n                                    s->strm->total_in_hi32++;\n                            }\n                        ;\n                        if (uc == 0)\n                            curr++;\n                        else\n                            curr--;\n                    }\n                s->len[t][i] = curr;\n            }\n        }\n        for (t = 0; t < nGroups; t++) {\n            minLen = 32;\n            maxLen = 0;\n            for (i = 0; i < alphaSize; i++) {\n                if (s->len[t][i] > maxLen)\n                    maxLen = s->len[t][i];\n                if (s->len[t][i] < minLen)\n                    minLen = s->len[t][i];\n            }\n            BZ2_hbCreateDecodeTables(&(s->limit[t][0]), &(s->base[t][0]), &(s->perm[t][0]), &(s->len[t][0]), minLen, maxLen, alphaSize);\n            s->minLens[t] = minLen;\n        }\n        EOB = s->nInUse + 1;\n        nblockMAX = 100000 * s->blockSize100k;\n        groupNo = -1;\n        groupPos = 0;\n        for (i = 0; i <= 255; i++)\n            s->unzftab[i] = 0;\n        {\n            Int32 ii, jj, kk;\n            kk = 4096 - 1;\n            for (ii = 256 / 16 - 1; ii >= 0; ii--) {\n                for (jj = 16 - 1; jj >= 0; jj--) {\n                    s->mtfa[kk] = (UChar)(ii * 16 + jj);\n                    kk--;\n                }\n                s->mtfbase[ii] = kk + 1;\n            }\n        }\n        nblock = 0;\n        {\n            if (groupPos == 0) {\n                groupNo++;\n                if (groupNo >= nSelectors) {\n                    retVal = (-4);\n                    goto save_state_and_return;\n                }\n                ;\n                ;\n                groupPos = 50;\n                gSel = s->selector[groupNo];\n                gMinlen = s->minLens[gSel];\n                gLimit = &(s->limit[gSel][0]);\n                gPerm = &(s->perm[gSel][0]);\n                gBase = &(s->base[gSel][0]);\n            }\n            groupPos--;\n            zn = gMinlen;\n          case 36:\n            s->state = 36;\n            while (((Bool)1))\n                {\n                    if (s->bsLive >= zn) {\n                        UInt32 v;\n                        v = (s->bsBuff >> (s->bsLive - zn)) & ((1 << zn) - 1);\n                        s->bsLive -= zn;\n                        zvec = v;\n                        break;\n                    }\n                    if (s->strm->avail_in == 0) {\n                        retVal = 0;\n                        goto save_state_and_return;\n                    }\n                    ;\n                    ;\n                    s->bsBuff = (s->bsBuff << 8) | ((UInt32)(*((UChar *)(s->strm->next_in))));\n                    s->bsLive += 8;\n                    s->strm->next_in++;\n                    s->strm->avail_in--;\n                    s->strm->total_in_lo32++;\n                    if (s->strm->total_in_lo32 == 0)\n                        s->strm->total_in_hi32++;\n                }\n            ;\n            while (1)\n                {\n                    if (zn > 20) {\n                        retVal = (-4);\n                        goto save_state_and_return;\n                    }\n                    ;\n                    ;\n                    if (zvec <= gLimit[zn])\n                        break;\n                    zn++;\n                  case 37:\n                    s->state = 37;\n                    while (((Bool)1))\n                        {\n                            if (s->bsLive >= 1) {\n                                UInt32 v;\n                                v = (s->bsBuff >> (s->bsLive - 1)) & ((1 << 1) - 1);\n                                s->bsLive -= 1;\n                                zj = v;\n                                break;\n                            }\n                            if (s->strm->avail_in == 0) {\n                                retVal = 0;\n                                goto save_state_and_return;\n                            }\n                            ;\n                            ;\n                            s->bsBuff = (s->bsBuff << 8) | ((UInt32)(*((UChar *)(s->strm->next_in))));\n                            s->bsLive += 8;\n                            s->strm->next_in++;\n                            s->strm->avail_in--;\n                            s->strm->total_in_lo32++;\n                            if (s->strm->total_in_lo32 == 0)\n                                s->strm->total_in_hi32++;\n                        }\n                    ;\n                    zvec = (zvec << 1) | zj;\n                }\n            ;\n            if (zvec - gBase[zn] < 0 || zvec - gBase[zn] >= 258) {\n                retVal = (-4);\n                goto save_state_and_return;\n            }\n            ;\n            ;\n            nextSym = gPerm[zvec - gBase[zn]];\n        }\n        ;\n        while (((Bool)1))\n            {\n                if (nextSym == EOB)\n                    break;\n                if (nextSym == 0 || nextSym == 1) {\n                    es = -1;\n                    N = 1;\n                    do {\n                        if (N >= 2 * 1024 * 1024) {\n                            retVal = (-4);\n                            goto save_state_and_return;\n                        }\n                        ;\n                        ;\n                        if (nextSym == 0)\n                            es = es + (0 + 1) * N;\n                        else if (nextSym == 1)\n                            es = es + (1 + 1) * N;\n                        N = N * 2;\n                        {\n                            if (groupPos == 0) {\n                                groupNo++;\n                                if (groupNo >= nSelectors) {\n                                    retVal = (-4);\n                                    goto save_state_and_return;\n                                }\n                                ;\n                                ;\n                                groupPos = 50;\n                                gSel = s->selector[groupNo];\n                                gMinlen = s->minLens[gSel];\n                                gLimit = &(s->limit[gSel][0]);\n                                gPerm = &(s->perm[gSel][0]);\n                                gBase = &(s->base[gSel][0]);\n                            }\n                            groupPos--;\n                            zn = gMinlen;\n                          case 38:\n                            s->state = 38;\n                            while (((Bool)1))\n                                {\n                                    if (s->bsLive >= zn) {\n                                        UInt32 v;\n                                        v = (s->bsBuff >> (s->bsLive - zn)) & ((1 << zn) - 1);\n                                        s->bsLive -= zn;\n                                        zvec = v;\n                                        break;\n                                    }\n                                    if (s->strm->avail_in == 0) {\n                                        retVal = 0;\n                                        goto save_state_and_return;\n                                    }\n                                    ;\n                                    ;\n                                    s->bsBuff = (s->bsBuff << 8) | ((UInt32)(*((UChar *)(s->strm->next_in))));\n                                    s->bsLive += 8;\n                                    s->strm->next_in++;\n                                    s->strm->avail_in--;\n                                    s->strm->total_in_lo32++;\n                                    if (s->strm->total_in_lo32 == 0)\n                                        s->strm->total_in_hi32++;\n                                }\n                            ;\n                            while (1)\n                                {\n                                    if (zn > 20) {\n                                        retVal = (-4);\n                                        goto save_state_and_return;\n                                    }\n                                    ;\n                                    ;\n                                    if (zvec <= gLimit[zn])\n                                        break;\n                                    zn++;\n                                  case 39:\n                                    s->state = 39;\n                                    while (((Bool)1))\n                                        {\n                                            if (s->bsLive >= 1) {\n                                                UInt32 v;\n                                                v = (s->bsBuff >> (s->bsLive - 1)) & ((1 << 1) - 1);\n                                                s->bsLive -= 1;\n                                                zj = v;\n                                                break;\n                                            }\n                                            if (s->strm->avail_in == 0) {\n                                                retVal = 0;\n                                                goto save_state_and_return;\n                                            }\n                                            ;\n                                            ;\n                                            s->bsBuff = (s->bsBuff << 8) | ((UInt32)(*((UChar *)(s->strm->next_in))));\n                                            s->bsLive += 8;\n                                            s->strm->next_in++;\n                                            s->strm->avail_in--;\n                                            s->strm->total_in_lo32++;\n                                            if (s->strm->total_in_lo32 == 0)\n                                                s->strm->total_in_hi32++;\n                                        }\n                                    ;\n                                    zvec = (zvec << 1) | zj;\n                                }\n                            ;\n                            if (zvec - gBase[zn] < 0 || zvec - gBase[zn] >= 258) {\n                                retVal = (-4);\n                                goto save_state_and_return;\n                            }\n                            ;\n                            ;\n                            nextSym = gPerm[zvec - gBase[zn]];\n                        }\n                        ;\n                    } while (nextSym == 0 || nextSym == 1);\n                    es++;\n                    uc = s->seqToUnseq[s->mtfa[s->mtfbase[0]]];\n                    s->unzftab[uc] += es;\n                    if (s->smallDecompress)\n                        while (es > 0)\n                            {\n                                if (nblock >= nblockMAX) {\n                                    retVal = (-4);\n                                    goto save_state_and_return;\n                                }\n                                ;\n                                ;\n                                s->ll16[nblock] = (UInt16)uc;\n                                nblock++;\n                                es--;\n                            }\n                    else\n                        while (es > 0)\n                            {\n                                if (nblock >= nblockMAX) {\n                                    retVal = (-4);\n                                    goto save_state_and_return;\n                                }\n                                ;\n                                ;\n                                s->tt[nblock] = (UInt32)uc;\n                                nblock++;\n                                es--;\n                            }\n                    ;\n                    continue;\n                } else {\n                    if (nblock >= nblockMAX) {\n                        retVal = (-4);\n                        goto save_state_and_return;\n                    }\n                    ;\n                    ;\n                    {\n                        Int32 ii, jj, kk, pp, lno, off;\n                        UInt32 nn;\n                        nn = (UInt32)(nextSym - 1);\n                        if (nn < 16) {\n                            pp = s->mtfbase[0];\n                            uc = s->mtfa[pp + nn];\n                            while (nn > 3)\n                                {\n                                    Int32 z = pp + nn;\n                                    s->mtfa[(z)] = s->mtfa[(z) - 1];\n                                    s->mtfa[(z) - 1] = s->mtfa[(z) - 2];\n                                    s->mtfa[(z) - 2] = s->mtfa[(z) - 3];\n                                    s->mtfa[(z) - 3] = s->mtfa[(z) - 4];\n                                    nn -= 4;\n                                }\n                            while (nn > 0)\n                                {\n                                    s->mtfa[(pp + nn)] = s->mtfa[(pp + nn) - 1];\n                                    nn--;\n                                }\n                            ;\n                            s->mtfa[pp] = uc;\n                        } else {\n                            lno = nn / 16;\n                            off = nn % 16;\n                            pp = s->mtfbase[lno] + off;\n                            uc = s->mtfa[pp];\n                            while (pp > s->mtfbase[lno])\n                                {\n                                    s->mtfa[pp] = s->mtfa[pp - 1];\n                                    pp--;\n                                }\n                            ;\n                            s->mtfbase[lno]++;\n                            while (lno > 0)\n                                {\n                                    s->mtfbase[lno]--;\n                                    s->mtfa[s->mtfbase[lno]] = s->mtfa[s->mtfbase[lno - 1] + 16 - 1];\n                                    lno--;\n                                }\n                            s->mtfbase[0]--;\n                            s->mtfa[s->mtfbase[0]] = uc;\n                            if (s->mtfbase[0] == 0) {\n                                kk = 4096 - 1;\n                                for (ii = 256 / 16 - 1; ii >= 0; ii--) {\n                                    for (jj = 16 - 1; jj >= 0; jj--) {\n                                        s->mtfa[kk] = s->mtfa[s->mtfbase[ii] + jj];\n                                        kk--;\n                                    }\n                                    s->mtfbase[ii] = kk + 1;\n                                }\n                            }\n                        }\n                    }\n                    s->unzftab[s->seqToUnseq[uc]]++;\n                    if (s->smallDecompress)\n                        s->ll16[nblock] = (UInt16)(s->seqToUnseq[uc]);\n                    else\n                        s->tt[nblock] = (UInt32)(s->seqToUnseq[uc]);\n                    nblock++;\n                    {\n                        if (groupPos == 0) {\n                            groupNo++;\n                            if (groupNo >= nSelectors) {\n                                retVal = (-4);\n                                goto save_state_and_return;\n                            }\n                            ;\n                            ;\n                            groupPos = 50;\n                            gSel = s->selector[groupNo];\n                            gMinlen = s->minLens[gSel];\n                            gLimit = &(s->limit[gSel][0]);\n                            gPerm = &(s->perm[gSel][0]);\n                            gBase = &(s->base[gSel][0]);\n                        }\n                        groupPos--;\n                        zn = gMinlen;\n                      case 40:\n                        s->state = 40;\n                        while (((Bool)1))\n                            {\n                                if (s->bsLive >= zn) {\n                                    UInt32 v;\n                                    v = (s->bsBuff >> (s->bsLive - zn)) & ((1 << zn) - 1);\n                                    s->bsLive -= zn;\n                                    zvec = v;\n                                    break;\n                                }\n                                if (s->strm->avail_in == 0) {\n                                    retVal = 0;\n                                    goto save_state_and_return;\n                                }\n                                ;\n                                ;\n                                s->bsBuff = (s->bsBuff << 8) | ((UInt32)(*((UChar *)(s->strm->next_in))));\n                                s->bsLive += 8;\n                                s->strm->next_in++;\n                                s->strm->avail_in--;\n                                s->strm->total_in_lo32++;\n                                if (s->strm->total_in_lo32 == 0)\n                                    s->strm->total_in_hi32++;\n                            }\n                        ;\n                        while (1)\n                            {\n                                if (zn > 20) {\n                                    retVal = (-4);\n                                    goto save_state_and_return;\n                                }\n                                ;\n                                ;\n                                if (zvec <= gLimit[zn])\n                                    break;\n                                zn++;\n                              case 41:\n                                s->state = 41;\n                                while (((Bool)1))\n                                    {\n                                        if (s->bsLive >= 1) {\n                                            UInt32 v;\n                                            v = (s->bsBuff >> (s->bsLive - 1)) & ((1 << 1) - 1);\n                                            s->bsLive -= 1;\n                                            zj = v;\n                                            break;\n                                        }\n                                        if (s->strm->avail_in == 0) {\n                                            retVal = 0;\n                                            goto save_state_and_return;\n                                        }\n                                        ;\n                                        ;\n                                        s->bsBuff = (s->bsBuff << 8) | ((UInt32)(*((UChar *)(s->strm->next_in))));\n                                        s->bsLive += 8;\n                                        s->strm->next_in++;\n                                        s->strm->avail_in--;\n                                        s->strm->total_in_lo32++;\n                                        if (s->strm->total_in_lo32 == 0)\n                                            s->strm->total_in_hi32++;\n                                    }\n                                ;\n                                zvec = (zvec << 1) | zj;\n                            }\n                        ;\n                        if (zvec - gBase[zn] < 0 || zvec - gBase[zn] >= 258) {\n                            retVal = (-4);\n                            goto save_state_and_return;\n                        }\n                        ;\n                        ;\n                        nextSym = gPerm[zvec - gBase[zn]];\n                    }\n                    ;\n                    continue;\n                }\n            }\n        if (s->origPtr < 0 || s->origPtr >= nblock) {\n            retVal = (-4);\n            goto save_state_and_return;\n        }\n        ;\n        ;\n        for (i = 0; i <= 255; i++) {\n            if (s->unzftab[i] < 0 || s->unzftab[i] > nblock) {\n                retVal = (-4);\n                goto save_state_and_return;\n            }\n            ;\n            ;\n        }\n        s->cftab[0] = 0;\n        for (i = 1; i <= 256; i++)\n            s->cftab[i] = s->unzftab[i - 1];\n        for (i = 1; i <= 256; i++)\n            s->cftab[i] += s->cftab[i - 1];\n        for (i = 0; i <= 256; i++) {\n            if (s->cftab[i] < 0 || s->cftab[i] > nblock) {\n                {\n                    retVal = (-4);\n                    goto save_state_and_return;\n                }\n                ;\n                ;\n            }\n        }\n        for (i = 1; i <= 256; i++) {\n            if (s->cftab[i - 1] > s->cftab[i]) {\n                {\n                    retVal = (-4);\n                    goto save_state_and_return;\n                }\n                ;\n                ;\n            }\n        }\n        s->state_out_len = 0;\n        s->state_out_ch = 0;\n        {\n            s->calculatedBlockCRC = 4294967295L;\n        }\n        ;\n        s->state = 2;\n        if (s->verbosity >= 2)\n            fprintf(__stderrp, \"rt+rld\");\n        if (s->smallDecompress) {\n            for (i = 0; i <= 256; i++)\n                s->cftabCopy[i] = s->cftab[i];\n            for (i = 0; i < nblock; i++) {\n                uc = (UChar)(s->ll16[i]);\n                {\n                    s->ll16[i] = (UInt16)(s->cftabCopy[uc] & 65535);\n                    {\n                        if (((i) & 1) == 0)\n                            s->ll4[(i) >> 1] = (s->ll4[(i) >> 1] & 240) | (s->cftabCopy[uc] >> 16);\n                        else\n                            s->ll4[(i) >> 1] = (s->ll4[(i) >> 1] & 15) | ((s->cftabCopy[uc] >> 16) << 4);\n                    }\n                    ;\n                }\n                ;\n                s->cftabCopy[uc]++;\n            }\n            i = s->origPtr;\n            j = (((UInt32)s->ll16[i]) | (((((UInt32)(s->ll4[(i) >> 1])) >> (((i) << 2) & 4)) & 15) << 16));\n            do {\n                Int32 tmp = (((UInt32)s->ll16[j]) | (((((UInt32)(s->ll4[(j) >> 1])) >> (((j) << 2) & 4)) & 15) << 16));\n                {\n                    s->ll16[j] = (UInt16)(i & 65535);\n                    {\n                        if (((j) & 1) == 0)\n                            s->ll4[(j) >> 1] = (s->ll4[(j) >> 1] & 240) | (i >> 16);\n                        else\n                            s->ll4[(j) >> 1] = (s->ll4[(j) >> 1] & 15) | ((i >> 16) << 4);\n                    }\n                    ;\n                }\n                ;\n                i = j;\n                j = tmp;\n            } while (i != s->origPtr);\n            s->tPos = s->origPtr;\n            s->nblock_used = 0;\n            if (s->blockRandomised) {\n                s->rNToGo = 0;\n                s->rTPos = 0;\n                if (s->tPos >= (UInt32)100000 * (UInt32)s->blockSize100k)\n                    return ((Bool)1);\n                s->k0 = BZ2_indexIntoF(s->tPos, s->cftab);\n                s->tPos = (((UInt32)s->ll16[s->tPos]) | (((((UInt32)(s->ll4[(s->tPos) >> 1])) >> (((s->tPos) << 2) & 4)) & 15) << 16));\n                ;\n                s->nblock_used++;\n                if (s->rNToGo == 0) {\n                    s->rNToGo = BZ2_rNums[s->rTPos];\n                    s->rTPos++;\n                    if (s->rTPos == 512)\n                        s->rTPos = 0;\n                }\n                s->rNToGo--;\n                ;\n                s->k0 ^= ((s->rNToGo == 1) ? 1 : 0);\n            } else {\n                if (s->tPos >= (UInt32)100000 * (UInt32)s->blockSize100k)\n                    return ((Bool)1);\n                s->k0 = BZ2_indexIntoF(s->tPos, s->cftab);\n                s->tPos = (((UInt32)s->ll16[s->tPos]) | (((((UInt32)(s->ll4[(s->tPos) >> 1])) >> (((s->tPos) << 2) & 4)) & 15) << 16));\n                ;\n                s->nblock_used++;\n            }\n        } else {\n            for (i = 0; i < nblock; i++) {\n                uc = (UChar)(s->tt[i] & 255);\n                s->tt[s->cftab[uc]] |= (i << 8);\n                s->cftab[uc]++;\n            }\n            s->tPos = s->tt[s->origPtr] >> 8;\n            s->nblock_used = 0;\n            if (s->blockRandomised) {\n                s->rNToGo = 0;\n                s->rTPos = 0;\n                if (s->tPos >= (UInt32)100000 * (UInt32)s->blockSize100k)\n                    return ((Bool)1);\n                s->tPos = s->tt[s->tPos];\n                s->k0 = (UChar)(s->tPos & 255);\n                s->tPos >>= 8;\n                ;\n                s->nblock_used++;\n                if (s->rNToGo == 0) {\n                    s->rNToGo = BZ2_rNums[s->rTPos];\n                    s->rTPos++;\n                    if (s->rTPos == 512)\n                        s->rTPos = 0;\n                }\n                s->rNToGo--;\n                ;\n                s->k0 ^= ((s->rNToGo == 1) ? 1 : 0);\n            } else {\n                if (s->tPos >= (UInt32)100000 * (UInt32)s->blockSize100k)\n                    return ((Bool)1);\n                s->tPos = s->tt[s->tPos];\n                s->k0 = (UChar)(s->tPos & 255);\n                s->tPos >>= 8;\n                ;\n                s->nblock_used++;\n            }\n        }\n        {\n            retVal = 0;\n            goto save_state_and_return;\n        }\n        ;\n        ;\n      endhdr_2:\n      case 42:\n        s->state = 42;\n        while (((Bool)1))\n            {\n                if (s->bsLive >= 8) {\n                    UInt32 v;\n                    v = (s->bsBuff >> (s->bsLive - 8)) & ((1 << 8) - 1);\n                    s->bsLive -= 8;\n                    uc = v;\n                    break;\n                }\n                if (s->strm->avail_in == 0) {\n                    retVal = 0;\n                    goto save_state_and_return;\n                }\n                ;\n                ;\n                s->bsBuff = (s->bsBuff << 8) | ((UInt32)(*((UChar *)(s->strm->next_in))));\n                s->bsLive += 8;\n                s->strm->next_in++;\n                s->strm->avail_in--;\n                s->strm->total_in_lo32++;\n                if (s->strm->total_in_lo32 == 0)\n                    s->strm->total_in_hi32++;\n            }\n        ;\n        if (uc != 114) {\n            retVal = (-4);\n            goto save_state_and_return;\n        }\n        ;\n        ;\n      case 43:\n        s->state = 43;\n        while (((Bool)1))\n            {\n                if (s->bsLive >= 8) {\n                    UInt32 v;\n                    v = (s->bsBuff >> (s->bsLive - 8)) & ((1 << 8) - 1);\n                    s->bsLive -= 8;\n                    uc = v;\n                    break;\n                }\n                if (s->strm->avail_in == 0) {\n                    retVal = 0;\n                    goto save_state_and_return;\n                }\n                ;\n                ;\n                s->bsBuff = (s->bsBuff << 8) | ((UInt32)(*((UChar *)(s->strm->next_in))));\n                s->bsLive += 8;\n                s->strm->next_in++;\n                s->strm->avail_in--;\n                s->strm->total_in_lo32++;\n                if (s->strm->total_in_lo32 == 0)\n                    s->strm->total_in_hi32++;\n            }\n        ;\n        if (uc != 69) {\n            retVal = (-4);\n            goto save_state_and_return;\n        }\n        ;\n        ;\n      case 44:\n        s->state = 44;\n        while (((Bool)1))\n            {\n                if (s->bsLive >= 8) {\n                    UInt32 v;\n                    v = (s->bsBuff >> (s->bsLive - 8)) & ((1 << 8) - 1);\n                    s->bsLive -= 8;\n                    uc = v;\n                    break;\n                }\n                if (s->strm->avail_in == 0) {\n                    retVal = 0;\n                    goto save_state_and_return;\n                }\n                ;\n                ;\n                s->bsBuff = (s->bsBuff << 8) | ((UInt32)(*((UChar *)(s->strm->next_in))));\n                s->bsLive += 8;\n                s->strm->next_in++;\n                s->strm->avail_in--;\n                s->strm->total_in_lo32++;\n                if (s->strm->total_in_lo32 == 0)\n                    s->strm->total_in_hi32++;\n            }\n        ;\n        if (uc != 56) {\n            retVal = (-4);\n            goto save_state_and_return;\n        }\n        ;\n        ;\n      case 45:\n        s->state = 45;\n        while (((Bool)1))\n            {\n                if (s->bsLive >= 8) {\n                    UInt32 v;\n                    v = (s->bsBuff >> (s->bsLive - 8)) & ((1 << 8) - 1);\n                    s->bsLive -= 8;\n                    uc = v;\n                    break;\n                }\n                if (s->strm->avail_in == 0) {\n                    retVal = 0;\n                    goto save_state_and_return;\n                }\n                ;\n                ;\n                s->bsBuff = (s->bsBuff << 8) | ((UInt32)(*((UChar *)(s->strm->next_in))));\n                s->bsLive += 8;\n                s->strm->next_in++;\n                s->strm->avail_in--;\n                s->strm->total_in_lo32++;\n                if (s->strm->total_in_lo32 == 0)\n                    s->strm->total_in_hi32++;\n            }\n        ;\n        if (uc != 80) {\n            retVal = (-4);\n            goto save_state_and_return;\n        }\n        ;\n        ;\n      case 46:\n        s->state = 46;\n        while (((Bool)1))\n            {\n                if (s->bsLive >= 8) {\n                    UInt32 v;\n                    v = (s->bsBuff >> (s->bsLive - 8)) & ((1 << 8) - 1);\n                    s->bsLive -= 8;\n                    uc = v;\n                    break;\n                }\n                if (s->strm->avail_in == 0) {\n                    retVal = 0;\n                    goto save_state_and_return;\n                }\n                ;\n                ;\n                s->bsBuff = (s->bsBuff << 8) | ((UInt32)(*((UChar *)(s->strm->next_in))));\n                s->bsLive += 8;\n                s->strm->next_in++;\n                s->strm->avail_in--;\n                s->strm->total_in_lo32++;\n                if (s->strm->total_in_lo32 == 0)\n                    s->strm->total_in_hi32++;\n            }\n        ;\n        if (uc != 144) {\n            retVal = (-4);\n            goto save_state_and_return;\n        }\n        ;\n        ;\n        s->storedCombinedCRC = 0;\n      case 47:\n        s->state = 47;\n        while (((Bool)1))\n            {\n                if (s->bsLive >= 8) {\n                    UInt32 v;\n                    v = (s->bsBuff >> (s->bsLive - 8)) & ((1 << 8) - 1);\n                    s->bsLive -= 8;\n                    uc = v;\n                    break;\n                }\n                if (s->strm->avail_in == 0) {\n                    retVal = 0;\n                    goto save_state_and_return;\n                }\n                ;\n                ;\n                s->bsBuff = (s->bsBuff << 8) | ((UInt32)(*((UChar *)(s->strm->next_in))));\n                s->bsLive += 8;\n                s->strm->next_in++;\n                s->strm->avail_in--;\n                s->strm->total_in_lo32++;\n                if (s->strm->total_in_lo32 == 0)\n                    s->strm->total_in_hi32++;\n            }\n        ;\n        s->storedCombinedCRC = (s->storedCombinedCRC << 8) | ((UInt32)uc);\n      case 48:\n        s->state = 48;\n        while (((Bool)1))\n            {\n                if (s->bsLive >= 8) {\n                    UInt32 v;\n                    v = (s->bsBuff >> (s->bsLive - 8)) & ((1 << 8) - 1);\n                    s->bsLive -= 8;\n                    uc = v;\n                    break;\n                }\n                if (s->strm->avail_in == 0) {\n                    retVal = 0;\n                    goto save_state_and_return;\n                }\n                ;\n                ;\n                s->bsBuff = (s->bsBuff << 8) | ((UInt32)(*((UChar *)(s->strm->next_in))));\n                s->bsLive += 8;\n                s->strm->next_in++;\n                s->strm->avail_in--;\n                s->strm->total_in_lo32++;\n                if (s->strm->total_in_lo32 == 0)\n                    s->strm->total_in_hi32++;\n            }\n        ;\n        s->storedCombinedCRC = (s->storedCombinedCRC << 8) | ((UInt32)uc);\n      case 49:\n        s->state = 49;\n        while (((Bool)1))\n            {\n                if (s->bsLive >= 8) {\n                    UInt32 v;\n                    v = (s->bsBuff >> (s->bsLive - 8)) & ((1 << 8) - 1);\n                    s->bsLive -= 8;\n                    uc = v;\n                    break;\n                }\n                if (s->strm->avail_in == 0) {\n                    retVal = 0;\n                    goto save_state_and_return;\n                }\n                ;\n                ;\n                s->bsBuff = (s->bsBuff << 8) | ((UInt32)(*((UChar *)(s->strm->next_in))));\n                s->bsLive += 8;\n                s->strm->next_in++;\n                s->strm->avail_in--;\n                s->strm->total_in_lo32++;\n                if (s->strm->total_in_lo32 == 0)\n                    s->strm->total_in_hi32++;\n            }\n        ;\n        s->storedCombinedCRC = (s->storedCombinedCRC << 8) | ((UInt32)uc);\n      case 50:\n        s->state = 50;\n        while (((Bool)1))\n            {\n                if (s->bsLive >= 8) {\n                    UInt32 v;\n                    v = (s->bsBuff >> (s->bsLive - 8)) & ((1 << 8) - 1);\n                    s->bsLive -= 8;\n                    uc = v;\n                    break;\n                }\n                if (s->strm->avail_in == 0) {\n                    retVal = 0;\n                    goto save_state_and_return;\n                }\n                ;\n                ;\n                s->bsBuff = (s->bsBuff << 8) | ((UInt32)(*((UChar *)(s->strm->next_in))));\n                s->bsLive += 8;\n                s->strm->next_in++;\n                s->strm->avail_in--;\n                s->strm->total_in_lo32++;\n                if (s->strm->total_in_lo32 == 0)\n                    s->strm->total_in_hi32++;\n            }\n        ;\n        s->storedCombinedCRC = (s->storedCombinedCRC << 8) | ((UInt32)uc);\n        s->state = 1;\n        {\n            retVal = 4;\n            goto save_state_and_return;\n        }\n        ;\n        ;\n      default:\n        {\n            if (!(((Bool)0)))\n                BZ2_bz__AssertH__fail(4001);\n        }\n        ;\n    }\n    {\n        if (!(((Bool)0)))\n            BZ2_bz__AssertH__fail(4002);\n    }\n    ;\n  save_state_and_return:\n    s->save_i = i;\n    s->save_j = j;\n    s->save_t = t;\n    s->save_alphaSize = alphaSize;\n    s->save_nGroups = nGroups;\n    s->save_nSelectors = nSelectors;\n    s->save_EOB = EOB;\n    s->save_groupNo = groupNo;\n    s->save_groupPos = groupPos;\n    s->save_nextSym = nextSym;\n    s->save_nblockMAX = nblockMAX;\n    s->save_nblock = nblock;\n    s->save_es = es;\n    s->save_N = N;\n    s->save_curr = curr;\n    s->save_zt = zt;\n    s->save_zn = zn;\n    s->save_zvec = zvec;\n    s->save_zj = zj;\n    s->save_gSel = gSel;\n    s->save_gMinlen = gMinlen;\n    s->save_gLimit = gLimit;\n    s->save_gBase = gBase;\n    s->save_gPerm = gPerm;\n    return retVal;\n}\n"
        }
    ],
    "total": 2,
    "visited": 1
}
{
    "functions": [],
    "total": 3,
    "visited": 0
}
{
    "functions": [
        {
            "id": "/Users/henriquepreto/Desktop/visit-ast-cpp/scripts/benchmarks/bzip2/bzip2.c#415:1#uncompressStream",
            "nobreaks": 1,
            "body": "{\n    BZFILE *bzf = ((void *)0);\n    Int32 bzerr, bzerr_dummy, ret, nread, streamNo, i;\n    UChar obuf[5000];\n    UChar unused[5000];\n    Int32 nUnused;\n    void *unusedTmpV;\n    UChar *unusedTmp;\n    nUnused = 0;\n    streamNo = 0;\n    ;\n    ;\n    if (ferror(stream))\n        goto errhandler_io;\n    if (ferror(zStream))\n        goto errhandler_io;\n    while (((Bool)1))\n        {\n            bzf = BZ2_bzReadOpen(&bzerr, zStream, verbosity, (int)smallMode, unused, nUnused);\n            if (bzf == ((void *)0) || bzerr != 0)\n                goto errhandler;\n            streamNo++;\n            while (bzerr == 0)\n                {\n                    nread = BZ2_bzRead(&bzerr, bzf, obuf, 5000);\n                    if (bzerr == (-5))\n                        goto trycat;\n                    if ((bzerr == 0 || bzerr == 4) && nread > 0)\n                        fwrite(obuf, sizeof(UChar), nread, stream);\n                    if (ferror(stream))\n                        goto errhandler_io;\n                }\n            if (bzerr != 4)\n                goto errhandler;\n            BZ2_bzReadGetUnused(&bzerr, bzf, &unusedTmpV, &nUnused);\n            if (bzerr != 0)\n                panic(\"decompress:bzReadGetUnused\");\n            unusedTmp = (UChar *)unusedTmpV;\n            for (i = 0; i < nUnused; i++)\n                unused[i] = unusedTmp[i];\n            BZ2_bzReadClose(&bzerr, bzf);\n            if (bzerr != 0)\n                panic(\"decompress:bzReadGetUnused\");\n            if (nUnused == 0 && myfeof(zStream))\n                break;\n        }\n  closeok:\n    if (ferror(zStream))\n        goto errhandler_io;\n    if (stream != __stdoutp) {\n        Int32 fd = fileno(stream);\n        if (fd < 0)\n            goto errhandler_io;\n        applySavedFileAttrToOutputFile(fd);\n    }\n    ret = fclose(zStream);\n    if (ret == (-1))\n        goto errhandler_io;\n    if (ferror(stream))\n        goto errhandler_io;\n    ret = fflush(stream);\n    if (ret != 0)\n        goto errhandler_io;\n    if (stream != __stdoutp) {\n        ret = fclose(stream);\n        outputHandleJustInCase = ((void *)0);\n        if (ret == (-1))\n            goto errhandler_io;\n    }\n    outputHandleJustInCase = ((void *)0);\n    if (verbosity >= 2)\n        fprintf(__stderrp, \"\\n    \");\n    return ((Bool)1);\n  trycat:\n    if (forceOverwrite) {\n        rewind(zStream);\n        while (((Bool)1))\n            {\n                if (myfeof(zStream))\n                    break;\n                nread = fread(obuf, sizeof(UChar), 5000, zStream);\n                if (ferror(zStream))\n                    goto errhandler_io;\n                if (nread > 0)\n                    fwrite(obuf, sizeof(UChar), nread, stream);\n                if (ferror(stream))\n                    goto errhandler_io;\n            }\n        goto closeok;\n    }\n  errhandler:\n    BZ2_bzReadClose(&bzerr_dummy, bzf);\n    switch (bzerr) {\n      case (-9):\n        configError();\n        break;\n      case (-6):\n      errhandler_io:\n        ioError();\n        break;\n      case (-4):\n        crcError();\n      case (-3):\n        outOfMemory();\n      case (-7):\n        compressedStreamEOF();\n      case (-5):\n        if (zStream != __stdinp)\n            fclose(zStream);\n        if (stream != __stdoutp)\n            fclose(stream);\n        if (streamNo == 1) {\n            return ((Bool)0);\n        } else {\n            if (noisy)\n                fprintf(__stderrp, \"\\n%s: %s: trailing garbage after EOF ignored\\n\", progName, inName);\n            return ((Bool)1);\n        }\n      default:\n        panic(\"decompress:unexpected error\");\n    }\n    panic(\"decompress:end\");\n    return ((Bool)1);\n}\n"
        },
        {
            "id": "/Users/henriquepreto/Desktop/visit-ast-cpp/scripts/benchmarks/bzip2/bzip2.c#536:1#testStream",
            "nobreaks": 1,
            "body": "{\n    BZFILE *bzf = ((void *)0);\n    Int32 bzerr, bzerr_dummy, ret, streamNo, i;\n    UChar obuf[5000];\n    UChar unused[5000];\n    Int32 nUnused;\n    void *unusedTmpV;\n    UChar *unusedTmp;\n    nUnused = 0;\n    streamNo = 0;\n    ;\n    if (ferror(zStream))\n        goto errhandler_io;\n    while (((Bool)1))\n        {\n            bzf = BZ2_bzReadOpen(&bzerr, zStream, verbosity, (int)smallMode, unused, nUnused);\n            if (bzf == ((void *)0) || bzerr != 0)\n                goto errhandler;\n            streamNo++;\n            while (bzerr == 0)\n                {\n                    BZ2_bzRead(&bzerr, bzf, obuf, 5000);\n                    if (bzerr == (-5))\n                        goto errhandler;\n                }\n            if (bzerr != 4)\n                goto errhandler;\n            BZ2_bzReadGetUnused(&bzerr, bzf, &unusedTmpV, &nUnused);\n            if (bzerr != 0)\n                panic(\"test:bzReadGetUnused\");\n            unusedTmp = (UChar *)unusedTmpV;\n            for (i = 0; i < nUnused; i++)\n                unused[i] = unusedTmp[i];\n            BZ2_bzReadClose(&bzerr, bzf);\n            if (bzerr != 0)\n                panic(\"test:bzReadGetUnused\");\n            if (nUnused == 0 && myfeof(zStream))\n                break;\n        }\n    if (ferror(zStream))\n        goto errhandler_io;\n    ret = fclose(zStream);\n    if (ret == (-1))\n        goto errhandler_io;\n    if (verbosity >= 2)\n        fprintf(__stderrp, \"\\n    \");\n    return ((Bool)1);\n  errhandler:\n    BZ2_bzReadClose(&bzerr_dummy, bzf);\n    if (verbosity == 0)\n        fprintf(__stderrp, \"%s: %s: \", progName, inName);\n    switch (bzerr) {\n      case (-9):\n        configError();\n        break;\n      case (-6):\n      errhandler_io:\n        ioError();\n        break;\n      case (-4):\n        fprintf(__stderrp, \"data integrity (CRC) error in data\\n\");\n        return ((Bool)0);\n      case (-3):\n        outOfMemory();\n      case (-7):\n        fprintf(__stderrp, \"file ends unexpectedly\\n\");\n        return ((Bool)0);\n      case (-5):\n        if (zStream != __stdinp)\n            fclose(zStream);\n        if (streamNo == 1) {\n            fprintf(__stderrp, \"bad magic number (file not created by bzip2)\\n\");\n            return ((Bool)0);\n        } else {\n            if (noisy)\n                fprintf(__stderrp, \"trailing garbage after EOF ignored\\n\");\n            return ((Bool)1);\n        }\n      default:\n        panic(\"test:unexpected error\");\n    }\n    panic(\"test:end\");\n    return ((Bool)1);\n}\n"
        }
    ],
    "total": 44,
    "visited": 2
}
{
    "functions": [],
    "total": 9,
    "visited": 0
}
{
    "functions": [],
    "total": 14,
    "visited": 0
}
{
    "functions": [],
    "total": 0,
    "visited": 0
}
